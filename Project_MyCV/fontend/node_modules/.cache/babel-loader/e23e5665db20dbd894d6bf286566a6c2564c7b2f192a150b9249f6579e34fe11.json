{"ast":null,"code":"import axios from \"axios\";\nconst httpRequest = axios.create({\n  baseURL: \"http://localhost:7000/api\"\n});\nconst token = localStorage.getItem(\"accessToken\");\nexport const remote = async (url, id) => {\n  try {\n    const response = await httpRequest.delete(`${url}/${id}`, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    return response;\n  } catch (error) {\n    return error.response;\n  }\n};\nexport const update = async (url, data, id, tokens = false, header = '\"Content-Type\": \"multipart/form-data\"') => {\n  try {\n    const headers = {\n      header\n    };\n    if (tokens === true) {\n      headers[\"Authorization\"] = `Bearer ${token}`;\n    }\n    const response = await httpRequest.put(`${url}${id}`, data, {\n      headers\n    });\n    return response;\n  } catch (error) {\n    return error.response;\n  }\n};\nexport const get = async (url, option = {}, tokens = false) => {\n  try {\n    // Kiểm tra xem có token được truyền vào không và thiết lập header nếu có\n    if (tokens) {\n      option.headers = {\n        ...option.headers,\n        Authorization: `Bearer ${token}`\n      };\n    }\n    console.log(tokens);\n    // Gửi request bằng thư viện HTTP request của bạn\n    const response = await httpRequest.get(url, option);\n\n    // Trả về dữ liệu từ response\n    return response.data;\n  } catch (error) {\n    // Xử lý lỗi nếu có\n    console.error('Error:', error);\n    throw error; // Ném lỗi để cho phép component gọi hàm `get` xử lý lỗi nếu cần\n  }\n};\nexport const post = async (url, data, headers = '\"Content-Type\": \"multipart/form-data\"') => {\n  try {\n    const response = await httpRequest.post(`${url}`, data, {\n      headers: {\n        headers,\n        Authorization: `Bearer ${token}`\n      }\n    });\n    return response;\n  } catch (error) {\n    return error.response;\n  }\n};","map":{"version":3,"names":["axios","httpRequest","create","baseURL","token","localStorage","getItem","remote","url","id","response","delete","headers","Authorization","error","update","data","tokens","header","put","get","option","console","log","post"],"sources":["D:/FPT Polytechnic/ListProject/projectCV/Project_MyCV/fontend/src/utils/httpRequest.js"],"sourcesContent":["import axios from \"axios\";\r\n\r\nconst httpRequest = axios.create({\r\n    baseURL: \"http://localhost:7000/api\"\r\n});\r\nconst token = localStorage.getItem(\"accessToken\");\r\n\r\nexport const remote = async(url, id) => {\r\n    try {\r\n        const response = await httpRequest.delete(`${url}/${id}`, {\r\n            headers: {\r\n                Authorization: `Bearer ${token}`\r\n            }\r\n        });\r\n        return response\r\n        \r\n    } catch (error) {\r\n        return error.response;\r\n    }\r\n}\r\n\r\nexport const update = async (url, data, id, tokens = false, header = '\"Content-Type\": \"multipart/form-data\"') => {\r\n    try {\r\n        const headers = {header};\r\n        if(tokens === true){\r\n            headers[\"Authorization\"]= `Bearer ${token}`;\r\n        }\r\n        const response = await httpRequest.put(`${url}${id}`, data, {headers});\r\n        return response;\r\n    } catch (error) {\r\n        return error.response;\r\n    }\r\n}\r\n\r\nexport const get = async (url, option = {}, tokens = false) => {\r\n    try {\r\n        // Kiểm tra xem có token được truyền vào không và thiết lập header nếu có\r\n        if (tokens) {\r\n            option.headers = {\r\n                ...option.headers,\r\n                Authorization: `Bearer ${token}`\r\n            };\r\n        }\r\n        console.log(tokens);\r\n        // Gửi request bằng thư viện HTTP request của bạn\r\n        const response = await httpRequest.get(url, option);\r\n\r\n        // Trả về dữ liệu từ response\r\n        return response.data;\r\n    } catch (error) {\r\n        // Xử lý lỗi nếu có\r\n        console.error('Error:', error);\r\n        throw error; // Ném lỗi để cho phép component gọi hàm `get` xử lý lỗi nếu cần\r\n    }\r\n};\r\n\r\nexport const post = async (url, data, headers = '\"Content-Type\": \"multipart/form-data\"') => {\r\n    try {\r\n        \r\n        const response = await httpRequest.post(`${url}`, data, {\r\n            headers: {\r\n                headers,\r\n                Authorization: `Bearer ${token}`\r\n            }\r\n        });\r\n        return response;\r\n    } catch (error) {\r\n        return error.response;\r\n    }\r\n}\r\n\r\n\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,WAAW,GAAGD,KAAK,CAACE,MAAM,CAAC;EAC7BC,OAAO,EAAE;AACb,CAAC,CAAC;AACF,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC;AAEjD,OAAO,MAAMC,MAAM,GAAG,MAAAA,CAAMC,GAAG,EAAEC,EAAE,KAAK;EACpC,IAAI;IACA,MAAMC,QAAQ,GAAG,MAAMT,WAAW,CAACU,MAAM,CAAE,GAAEH,GAAI,IAAGC,EAAG,EAAC,EAAE;MACtDG,OAAO,EAAE;QACLC,aAAa,EAAG,UAAST,KAAM;MACnC;IACJ,CAAC,CAAC;IACF,OAAOM,QAAQ;EAEnB,CAAC,CAAC,OAAOI,KAAK,EAAE;IACZ,OAAOA,KAAK,CAACJ,QAAQ;EACzB;AACJ,CAAC;AAED,OAAO,MAAMK,MAAM,GAAG,MAAAA,CAAOP,GAAG,EAAEQ,IAAI,EAAEP,EAAE,EAAEQ,MAAM,GAAG,KAAK,EAAEC,MAAM,GAAG,uCAAuC,KAAK;EAC7G,IAAI;IACA,MAAMN,OAAO,GAAG;MAACM;IAAM,CAAC;IACxB,IAAGD,MAAM,KAAK,IAAI,EAAC;MACfL,OAAO,CAAC,eAAe,CAAC,GAAG,UAASR,KAAM,EAAC;IAC/C;IACA,MAAMM,QAAQ,GAAG,MAAMT,WAAW,CAACkB,GAAG,CAAE,GAAEX,GAAI,GAAEC,EAAG,EAAC,EAAEO,IAAI,EAAE;MAACJ;IAAO,CAAC,CAAC;IACtE,OAAOF,QAAQ;EACnB,CAAC,CAAC,OAAOI,KAAK,EAAE;IACZ,OAAOA,KAAK,CAACJ,QAAQ;EACzB;AACJ,CAAC;AAED,OAAO,MAAMU,GAAG,GAAG,MAAAA,CAAOZ,GAAG,EAAEa,MAAM,GAAG,CAAC,CAAC,EAAEJ,MAAM,GAAG,KAAK,KAAK;EAC3D,IAAI;IACA;IACA,IAAIA,MAAM,EAAE;MACRI,MAAM,CAACT,OAAO,GAAG;QACb,GAAGS,MAAM,CAACT,OAAO;QACjBC,aAAa,EAAG,UAAST,KAAM;MACnC,CAAC;IACL;IACAkB,OAAO,CAACC,GAAG,CAACN,MAAM,CAAC;IACnB;IACA,MAAMP,QAAQ,GAAG,MAAMT,WAAW,CAACmB,GAAG,CAACZ,GAAG,EAAEa,MAAM,CAAC;;IAEnD;IACA,OAAOX,QAAQ,CAACM,IAAI;EACxB,CAAC,CAAC,OAAOF,KAAK,EAAE;IACZ;IACAQ,OAAO,CAACR,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;IAC9B,MAAMA,KAAK,CAAC,CAAC;EACjB;AACJ,CAAC;AAED,OAAO,MAAMU,IAAI,GAAG,MAAAA,CAAOhB,GAAG,EAAEQ,IAAI,EAAEJ,OAAO,GAAG,uCAAuC,KAAK;EACxF,IAAI;IAEA,MAAMF,QAAQ,GAAG,MAAMT,WAAW,CAACuB,IAAI,CAAE,GAAEhB,GAAI,EAAC,EAAEQ,IAAI,EAAE;MACpDJ,OAAO,EAAE;QACLA,OAAO;QACPC,aAAa,EAAG,UAAST,KAAM;MACnC;IACJ,CAAC,CAAC;IACF,OAAOM,QAAQ;EACnB,CAAC,CAAC,OAAOI,KAAK,EAAE;IACZ,OAAOA,KAAK,CAACJ,QAAQ;EACzB;AACJ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}