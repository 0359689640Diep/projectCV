{"ast":null,"code":"import axios from \"axios\";\nconst httpRequest = axios.create({\n  baseURL: \"http://localhost:7000/api/\"\n});\nconst token = localStorage.getItem(\"accessToken\");\nexport const update = async (url, data, id, headers = '\"Content-Type\": \"multipart/form-data\"', tokens = false) => {\n  try {\n    const header = {\n      \"Content-Type\": \"multipart/form-data\",\n      \"Authorization\": token\n    };\n    const response = await httpRequest.put(`${url}${id}`, data, {\n      headers: {\n        headers\n      }\n    });\n    return response;\n  } catch (error) {\n    return error.response;\n  }\n};\nexport const get = async (url, option = {}, tokens = false) => {\n  try {\n    // Kiểm tra xem có token được truyền vào không và thiết lập header nếu có\n    if (tokens) {\n      option.headers = {\n        ...option.headers,\n        Authorization: token\n      };\n    }\n\n    // Gửi request bằng thư viện HTTP request của bạn\n    const response = await httpRequest.get(url, option);\n\n    // Trả về dữ liệu từ response\n    return response.data;\n  } catch (error) {\n    // Xử lý lỗi nếu có\n    console.error('Error:', error);\n    throw error; // Ném lỗi để cho phép component gọi hàm `get` xử lý lỗi nếu cần\n  }\n};\nexport const post = async (url, data, headers = '\"Content-Type\": \"multipart/form-data\"') => {\n  try {\n    const response = await httpRequest.post(`${url}`, data, {\n      headers: {\n        headers,\n        Authorization: token\n      }\n    });\n    return response;\n  } catch (error) {\n    return error.response;\n  }\n};\nexport const remote = async (url, id) => {\n  const response = await httpRequest.delete(url, id, {\n    headers: {\n      Authorization: token\n    }\n  });\n  return response.data;\n};","map":{"version":3,"names":["axios","httpRequest","create","baseURL","token","localStorage","getItem","update","url","data","id","headers","tokens","header","response","put","error","get","option","Authorization","console","post","remote","delete"],"sources":["D:/FPT Polytechnic/ListProject/Project_MyCV/fontend/src/utils/httpRequest.js"],"sourcesContent":["import axios from \"axios\";\r\n\r\nconst httpRequest = axios.create({\r\n    baseURL: \"http://localhost:7000/api/\"\r\n});\r\nconst token = localStorage.getItem(\"accessToken\");\r\n\r\nexport const update = async (url, data, id, headers = '\"Content-Type\": \"multipart/form-data\"', tokens = false) => {\r\n    try {\r\n        \r\n        const header = {\"Content-Type\": \"multipart/form-data\", \"Authorization\": token};\r\n        const response = await httpRequest.put(`${url}${id}`, data, {\r\n            headers: {\r\n                headers\r\n            }\r\n        });\r\n        return response;\r\n    } catch (error) {\r\n        return error.response;\r\n    }\r\n}\r\n\r\nexport const get = async (url, option = {}, tokens = false) => {\r\n    try {\r\n        // Kiểm tra xem có token được truyền vào không và thiết lập header nếu có\r\n        if (tokens) {\r\n            option.headers = {\r\n                ...option.headers,\r\n                Authorization: token\r\n            };\r\n        }\r\n\r\n        // Gửi request bằng thư viện HTTP request của bạn\r\n        const response = await httpRequest.get(url, option);\r\n\r\n        // Trả về dữ liệu từ response\r\n        return response.data;\r\n    } catch (error) {\r\n        // Xử lý lỗi nếu có\r\n        console.error('Error:', error);\r\n        throw error; // Ném lỗi để cho phép component gọi hàm `get` xử lý lỗi nếu cần\r\n    }\r\n};\r\n\r\nexport const post = async (url, data, headers = '\"Content-Type\": \"multipart/form-data\"') => {\r\n    try {\r\n        \r\n        const response = await httpRequest.post(`${url}`, data, {\r\n            headers: {\r\n                headers,\r\n                Authorization: token\r\n            }\r\n        });\r\n        return response;\r\n    } catch (error) {\r\n        return error.response;\r\n    }\r\n}\r\n\r\n\r\nexport const remote = async(url, id) => {\r\n    const response = await httpRequest.delete(url, id, {\r\n        headers: {\r\n            Authorization: token\r\n        }\r\n    });\r\n    return response.data\r\n}"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,WAAW,GAAGD,KAAK,CAACE,MAAM,CAAC;EAC7BC,OAAO,EAAE;AACb,CAAC,CAAC;AACF,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC;AAEjD,OAAO,MAAMC,MAAM,GAAG,MAAAA,CAAOC,GAAG,EAAEC,IAAI,EAAEC,EAAE,EAAEC,OAAO,GAAG,uCAAuC,EAAEC,MAAM,GAAG,KAAK,KAAK;EAC9G,IAAI;IAEA,MAAMC,MAAM,GAAG;MAAC,cAAc,EAAE,qBAAqB;MAAE,eAAe,EAAET;IAAK,CAAC;IAC9E,MAAMU,QAAQ,GAAG,MAAMb,WAAW,CAACc,GAAG,CAAE,GAAEP,GAAI,GAAEE,EAAG,EAAC,EAAED,IAAI,EAAE;MACxDE,OAAO,EAAE;QACLA;MACJ;IACJ,CAAC,CAAC;IACF,OAAOG,QAAQ;EACnB,CAAC,CAAC,OAAOE,KAAK,EAAE;IACZ,OAAOA,KAAK,CAACF,QAAQ;EACzB;AACJ,CAAC;AAED,OAAO,MAAMG,GAAG,GAAG,MAAAA,CAAOT,GAAG,EAAEU,MAAM,GAAG,CAAC,CAAC,EAAEN,MAAM,GAAG,KAAK,KAAK;EAC3D,IAAI;IACA;IACA,IAAIA,MAAM,EAAE;MACRM,MAAM,CAACP,OAAO,GAAG;QACb,GAAGO,MAAM,CAACP,OAAO;QACjBQ,aAAa,EAAEf;MACnB,CAAC;IACL;;IAEA;IACA,MAAMU,QAAQ,GAAG,MAAMb,WAAW,CAACgB,GAAG,CAACT,GAAG,EAAEU,MAAM,CAAC;;IAEnD;IACA,OAAOJ,QAAQ,CAACL,IAAI;EACxB,CAAC,CAAC,OAAOO,KAAK,EAAE;IACZ;IACAI,OAAO,CAACJ,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;IAC9B,MAAMA,KAAK,CAAC,CAAC;EACjB;AACJ,CAAC;AAED,OAAO,MAAMK,IAAI,GAAG,MAAAA,CAAOb,GAAG,EAAEC,IAAI,EAAEE,OAAO,GAAG,uCAAuC,KAAK;EACxF,IAAI;IAEA,MAAMG,QAAQ,GAAG,MAAMb,WAAW,CAACoB,IAAI,CAAE,GAAEb,GAAI,EAAC,EAAEC,IAAI,EAAE;MACpDE,OAAO,EAAE;QACLA,OAAO;QACPQ,aAAa,EAAEf;MACnB;IACJ,CAAC,CAAC;IACF,OAAOU,QAAQ;EACnB,CAAC,CAAC,OAAOE,KAAK,EAAE;IACZ,OAAOA,KAAK,CAACF,QAAQ;EACzB;AACJ,CAAC;AAGD,OAAO,MAAMQ,MAAM,GAAG,MAAAA,CAAMd,GAAG,EAAEE,EAAE,KAAK;EACpC,MAAMI,QAAQ,GAAG,MAAMb,WAAW,CAACsB,MAAM,CAACf,GAAG,EAAEE,EAAE,EAAE;IAC/CC,OAAO,EAAE;MACLQ,aAAa,EAAEf;IACnB;EACJ,CAAC,CAAC;EACF,OAAOU,QAAQ,CAACL,IAAI;AACxB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}