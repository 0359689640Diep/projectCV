{"ast":null,"code":"import*as httpRequest from\"../utils/httpRequest\";import Notification from\"../components/Notification\";export const sendMessage=async body=>{try{const response=await httpRequest.post(\"message/sendmessage\",{...body});return response;}catch(error){return error;}};export const getMessage=async()=>{try{const response=await httpRequest.get(\"message/getemail\",{},true);return response;}catch(error){if(error.response.status===403){Notification(error.response.data.message,\"error\",\"/login\");localStorage.removeItem(\"accessToken\");};return error;}};export const updateStatusMessage=async id=>{try{const response=await httpRequest.post(\"message/updatestatusmessage/\".concat(id));return response;}catch(error){if(error.response.status===403){Notification(error.response.data.message,\"error\",\"/login\");localStorage.removeItem(\"accessToken\");};return error;}};export const deleteEmail=async id=>{try{const response=await httpRequest.remote('message/deleteemail',id);return response;}catch(error){if(error.response.status===403){Notification(error.response.data.message,\"error\",\"/login\");localStorage.removeItem(\"accessToken\");};return error;}};export const replyGmail=async(body,id)=>{try{const response=await httpRequest.update(\"message/reply-email/\",body,id,true,'\"Content-Type\": \"application/json\"');return response;}catch(error){if(error.response.status===403){Notification(error.response.data.message,\"error\",\"/login\");localStorage.removeItem(\"accessToken\");};return error;}};","map":{"version":3,"names":["httpRequest","Notification","sendMessage","body","response","post","error","getMessage","get","status","data","message","localStorage","removeItem","updateStatusMessage","id","concat","deleteEmail","remote","replyGmail","update"],"sources":["D:/FPT Polytechnic/ListProject/projectCV/Project_MyCV/fontend/src/Services/message.js"],"sourcesContent":["import * as httpRequest from \"../utils/httpRequest\";\r\nimport Notification from \"../components/Notification\";\r\n\r\nexport const sendMessage = async (body) => {\r\n    \r\n    try {\r\n        const response = await httpRequest.post(`message/sendmessage`, {\r\n            ...body\r\n        });\r\n        return response;\r\n    } catch (error) {\r\n        return error;\r\n    }\r\n};\r\n\r\nexport const getMessage = async () => {\r\n    try {\r\n        const response = await httpRequest.get(`message/getemail`, {}, true);\r\n        return response;\r\n    } catch (error) {\r\n        if(error.response.status === 403){\r\n            Notification(error.response.data.message, \"error\", \"/login\");\r\n             localStorage.removeItem(\"accessToken\");\r\n        };\r\n        return error;\r\n    }\r\n};\r\n\r\nexport const updateStatusMessage = async (id) => {\r\n    try {\r\n        const response = await httpRequest.post(`message/updatestatusmessage/${id}`);\r\n        return response;\r\n    } catch (error) {\r\n        if(error.response.status === 403){\r\n            Notification(error.response.data.message, \"error\", \"/login\");\r\n             localStorage.removeItem(\"accessToken\");\r\n        };\r\n        return error;\r\n    }\r\n};\r\n\r\nexport const deleteEmail = async (id) => {\r\n    try {\r\n        const response = await httpRequest.remote('message/deleteemail', id);\r\n        return response;\r\n    } catch (error) {\r\n        if(error.response.status === 403){\r\n            Notification(error.response.data.message, \"error\", \"/login\");\r\n             localStorage.removeItem(\"accessToken\");\r\n        };\r\n        return error;\r\n    }\r\n}\r\n\r\nexport const replyGmail = async (body, id) => {\r\n    try {\r\n        const response = await httpRequest.update(`message/reply-email/`, body, id, true, '\"Content-Type\": \"application/json\"');\r\n        return response;\r\n    } catch (error) {\r\n        if(error.response.status === 403){\r\n            Notification(error.response.data.message, \"error\", \"/login\");\r\n             localStorage.removeItem(\"accessToken\");\r\n        };\r\n        return error;\r\n    }\r\n};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}